# Generated by Django 5.2 on 2025-07-09 13:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Newsletter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
                ('unsubscribed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Newsletter Subscription',
                'verbose_name_plural': 'Newsletter Subscriptions',
                'db_table': 'users_newsletter',
                'ordering': ['-subscribed_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the user', primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text="User's email address - used for login", max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('company_name', models.CharField(blank=True, help_text='Company or organization name', max_length=255)),
                ('website', models.URLField(blank=True, help_text='Current website URL if any')),
                ('bio', models.TextField(blank=True, help_text='Brief description about user or business', max_length=500)),
                ('avatar', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to='avatars/')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether user has verified their email address')),
                ('newsletter_subscription', models.BooleanField(default=True, help_text='Whether user wants to receive newsletters')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users_user',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='WebsiteQuote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(help_text="Client's full name", max_length=255)),
                ('email', models.EmailField(help_text="Client's email address", max_length=254)),
                ('phone', models.CharField(help_text="Client's phone number", max_length=20)),
                ('company_name', models.CharField(blank=True, help_text='Company or organization name', max_length=255)),
                ('website_type', models.CharField(choices=[('business', 'Business Website'), ('ecommerce', 'E-commerce Store'), ('portfolio', 'Portfolio Website'), ('blog', 'Blog/News Website'), ('landing', 'Landing Page'), ('web_app', 'Web Application'), ('custom', 'Custom Solution')], help_text='Type of website needed', max_length=50)),
                ('project_description', models.TextField(help_text='Detailed description of the project requirements')),
                ('budget_range', models.CharField(choices=[('500-1000', '$500 - $1,000'), ('1000-2500', '$1,000 - $2,500'), ('2500-5000', '$2,500 - $5,000'), ('5000-10000', '$5,000 - $10,000'), ('10000+', '$10,000+'), ('not_sure', 'Not Sure')], help_text='Expected budget range', max_length=20)),
                ('timeline', models.CharField(choices=[('asap', 'ASAP (Rush Job)'), ('1_month', 'Within 1 Month'), ('2_months', 'Within 2 Months'), ('3_months', 'Within 3 Months'), ('flexible', 'Flexible Timeline')], help_text='Desired project timeline', max_length=20)),
                ('features_needed', models.JSONField(blank=True, default=list, help_text='List of specific features needed')),
                ('current_website', models.URLField(blank=True, help_text='Current website URL if any')),
                ('status', models.CharField(choices=[('new', 'New Request'), ('contacted', 'Client Contacted'), ('quoted', 'Quote Sent'), ('approved', 'Quote Approved'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='new', max_length=20)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated project cost', max_digits=10, null=True)),
                ('admin_notes', models.TextField(blank=True, help_text='Internal notes for admin use')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contacted_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, help_text='Associated user account if available', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Website Quote Request',
                'verbose_name_plural': 'Website Quote Requests',
                'db_table': 'users_website_quote',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'is_verified'], name='users_user_is_acti_d093de_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_user_created_cf865c_idx'),
        ),
        migrations.AddIndex(
            model_name='websitequote',
            index=models.Index(fields=['status'], name='users_websi_status_7939f5_idx'),
        ),
        migrations.AddIndex(
            model_name='websitequote',
            index=models.Index(fields=['created_at'], name='users_websi_created_9e0c2f_idx'),
        ),
        migrations.AddIndex(
            model_name='websitequote',
            index=models.Index(fields=['email'], name='users_websi_email_f416a1_idx'),
        ),
    ]
