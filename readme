# Onehux Web Service

Professional Website Development Services - A Django-based web application for providing custom website development services.

## 🚀 Features

- **Professional Landing Page** - SEO-optimized homepage with modern design
- **Quote Request System** - Comprehensive quote request form with email notifications
- **User Management** - Custom user registration, authentication, and dashboard
- **Admin Panel** - Enhanced Django admin for managing quotes and users
- **Email System** - Automated email notifications using Celery
- **Responsive Design** - Mobile-first design using Tailwind CSS
- **Security Features** - Rate limiting, CSRF protection, and bot detection
- **SEO Optimized** - Structured data, sitemaps, and meta tags
- **Production Ready** - Docker support, systemd services, and deployment scripts

## 🛠️ Tech Stack

- **Backend**: Django 5.2, PostgreSQL, Redis
- **Frontend**: Tailwind CSS 4.1, Alpine.js, HTMX
- **Task Queue**: Celery with Redis broker
- **Deployment**: Gunicorn, Nginx, systemd
- **Security**: django-axes, CORS headers, SSL/TLS

## 📋 Requirements

- Python 3.9+
- Node.js 18+ (for Tailwind CSS)
- PostgreSQL 13+
- Redis 6+
- Ubuntu 20.04+ (for production)

## 🏁 Quick Start

### Development Setup

1. **Clone the repository**
   ```bash
   git clone https://github.com/yourusername/onehux-web-service.git
   cd onehux-web-service
   ```

2. **Set up Python virtual environment**
   ```bash
   python3 -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   pip install -r requirements/dev.txt
   ```

3. **Set up Node.js dependencies**
   ```bash
   npm install
   ```

4. **Configure environment variables**
   ```bash
   cp dev.env.example dev.env
   # Edit dev.env with your settings
   ```

5. **Set up database**
   ```bash
   # Create PostgreSQL database
   createdb onehux_web_service_dev
   
   # Run migrations
   export DJANGO_ENV=development
   python manage.py migrate
   ```

6. **Create superuser**
   ```bash
   python manage.py createsuperuser
   ```

7. **Start development servers**
   ```bash
   # Terminal 1: Django development server
   python manage.py runserver
   
   # Terminal 2: Tailwind CSS watcher
   npm run watch
   
   # Terminal 3: Celery worker (optional)
   celery -A website worker --loglevel=info
   
   # Terminal 4: Celery beat (optional)
   celery -A website beat --loglevel=info
   ```

8. **Access the application**
   - Main site: http://localhost:8000
   - Admin panel: http://localhost:8000/admin/

### Production Deployment

For production deployment on Ubuntu VPS:

1. **Run the deployment script**
   ```bash
   chmod +x deploy.sh
   ./deploy.sh --first-time
   ```

2. **Configure SSL certificate**
   ```bash
   sudo certbot --nginx -d onehuxwebservice.com -d www.onehuxwebservice.com
   ```

3. **Update environment variables**
   ```bash
   sudo nano /home/onehux/onehux-web-service/prod.env
   ```

4. **Restart services**
   ```bash
   ./deploy.sh --restart
   ```

## 📁 Project Structure

```
onehux-web-service/
├── website/                 # Django project settings
│   ├── settings/           # Environment-specific settings
│   ├── static/            # Static files (CSS, JS, images)
│   ├── celery.py          # Celery configuration
│   └── urls.py            # Main URL configuration
├── users/                  # User management app
│   ├── models.py          # User and Quote models
│   ├── views.py           # User views and quote system
│   ├── forms.py           # Django forms
│   ├── tasks.py           # Celery tasks
│   └── templates/         # User-specific templates
├── pages/                  # Static pages app
│   ├── views.py           # Page views
│   ├── context_processors.py  # Global context
│   └── templates/         # Page templates
├── templates/              # Global templates
│   ├── base.html          # Base template
│   ├── components/        # Reusable components
│   └── emails/            # Email templates
├── static/                 # Collected static files (production)
├── media/                  # User uploaded files
├── logs/                   # Application logs
├── requirements/           # Python dependencies
├── deployment/             # Deployment configurations
├── dev.env                 # Development environment variables
├── prod.env               # Production environment variables
├── manage.py              # Django management script
├── deploy.sh              # Production deployment script
├── package.json           # Node.js dependencies
├── tailwind.config.js     # Tailwind CSS configuration
└── README.md              # This file
```

## 🔧 Configuration

### Environment Variables

The application uses two environment files:

- `dev.env` - Development settings
- `prod.env` - Production settings

Key variables to configure:

```bash
# Django
SECRET_KEY=your-secret-key
DEBUG=False
DJANGO_ENV=production

# Database
DB_NAME=onehux_web_service_prod
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_HOST=localhost

# Redis
REDIS_HOST=localhost
REDIS_PASSWORD=your_redis_password

# Email
EMAIL_HOST=smtp.your-email-provider.com
EMAIL_HOST_USER=hello@onehuxwebservice.com
EMAIL_HOST_PASSWORD=your_email_password

# Site
BASE_URL=https://onehuxwebservice.com
ALLOWED_HOSTS=onehuxwebservice.com,www.onehuxwebservice.com
```

### Tailwind CSS

The project uses Tailwind CSS 4.1 with custom configuration:

```bash
# Development (watch mode)
npm run watch

# Production build
npm run prod
```

### Celery Tasks

The application includes several Celery tasks:

- Email notifications (welcome, quote confirmations)
- User activity analysis
- Database cleanup
- Weekly analytics reports

## 🚀 Deployment

### Manual Deployment

1. **Server Setup**
   ```bash
   # Update system
   sudo apt update && sudo apt upgrade -y
   
   # Install dependencies
   sudo apt install python3 python3-pip postgresql redis-server nginx
   ```

2. **Application Setup**
   ```bash
   # Clone and setup
   git clone [repository-url]
   cd onehux-web-service
   python3 -m venv venv
   source venv/bin/activate
   pip install -r requirements/prod.txt
   ```

3. **Configure Services**
   ```bash
   # Copy systemd service files
   sudo cp deployment/systemd/*.service /etc/systemd/system/
   sudo systemctl daemon-reload
   sudo systemctl enable onehux-web onehux-celery onehux-celery-beat
   ```

### Automated Deployment

Use the provided deployment script:

```bash
# First time deployment
./deploy.sh --first-time

# Update existing deployment
./deploy.sh --update

# Restart services
./deploy.sh --restart

# Check status
./deploy.sh --status
```

## 🔒 Security

The application includes several security features:

- **CSRF Protection** - Django's built-in CSRF protection
- **Rate Limiting** - Using django-ratelimit and django-axes
- **SQL Injection Protection** - Django ORM prevents SQL injection
- **XSS Protection** - Template auto-escaping and CSP headers
- **Security Headers** - HSTS, X-Frame-Options, etc.
- **Bot Detection** - User-agent analysis and behavior monitoring

## 📊 Monitoring

### Health Checks

- Application health: `/health/`
- Service status: `/status/`
- Admin monitoring: Django admin panel

### Logging

Logs are stored in `/logs/` directory:

- `general.log` - Application logs
- `celery.log` - Celery task logs
- `security.log` - Security-related logs
- `errors.log` - Error logs

### Analytics

The application includes built-in analytics:

- Quote request tracking
- User activity analysis
- Performance monitoring
- Weekly reports via email

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🆘 Support

For support and questions:

- Email: support@onehuxwebservice.com
- Documentation: [Project Wiki](https://github.com/yourusername/onehux-web-service/wiki)
- Issues: [GitHub Issues](https://github.com/yourusername/onehux-web-service/issues)

## 🙏 Acknowledgments

- Django community for the excellent framework
- Tailwind CSS for the utility-first CSS framework
- All contributors and supporters of this project

---

**Onehux Web Service** - Professional Website Development Services

